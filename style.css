@font-face {
    font-family: "Karla";
    font-display: swap;
    font-weight: 100 900;
    src: url('assets/fonts/Karla-VariableFont_wght.ttf') format('truetype');
}

:root {
    --clr-primary-200: hsl(148, 38%, 91%);
    --clr-primary-600: hsl(169, 82%, 27%);
    --clr-primary-700: hsl(0, 66%, 54%);

    --clr-neutral-100: hsl(0, 0%, 100%);
    --clr-neutral-500: hsl(186, 15%, 59%);
    --clr-neutral-500-hsl: 186, 15%, 59%;
    --clr-neutral-900: hsl(187, 24%, 22%);

    --f-family: "Karla", sans-serif;

    --fs-200: 0.875rem;
    --fs-300: 1rem;
    --fs-400: 1.125rem;
    --fs-600: 2rem;

    --fw-regular: 400;
    --fw-bold: 700;
}

html,
body {
    height: 100%;
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

* {
    margin: 0;
    padding: 0;
    font: inherit;
}

p,
h1,
h2,
h3 {
    overflow-wrap: break-word;
}

html:focus-within {
    scroll-behavior: smooth;
}

body {
    text-rendering: optimizeSpeed;

}

a:not([class]) {
    text-decoration-skip-ink: auto;
}

img,
svg,
picture {
    max-width: 100%;
    display: block;
}

@media (prefers-reduced-motion: reduce) {
    html:focus-within {
        scroll-behavior: auto;
    }

    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}


body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: var(--f-family);
    font-size: var(--fs-300);
    color: var(--clr-neutral-900);
    line-height: 1.5;
}


.wrapper {
    --max-width: 738px;
    --horizontal-padding: 1rem;
    width: min(var(--max-width), 100% - (var(--horizontal-padding)*2));
    margin-inline: auto;
}


.text-light {
    color: var(--clr-neutral-100);
}

.text-semi-light {
    color: var(--clr-neutral-500);
}

.text-dark {
    color: var(--clr-neutral-900)
}

.text-accent {
    color: var(--clr-primary-700);
}


.bg-white {
    background-color: var(--clr-neutral-100);
}

.bg-light {
    background-color: var(--clr-primary-200);
}

.bg-dark {
    background-color: var(--clr-neutral-900);
}


.fs-200 {
    font-size: var(--fs-200);
}

.fs-300 {
    font-size: var(--fs-300);
}

.fs-400 {
    font-size: var(--fs-400);
}

.fs-600 {
    font-size: var(--fs-600);
}

.fw-bold {
    font-weight: var(--fw-bold);
}


.grid {
    display: grid;
}

.contact-form {
    --child-border-radius: 0.5rem;
    display: grid;
    row-gap: 2rem;
    column-gap: 1rem;
    grid-template-columns: 1fr;
    border-radius: 1rem;
    margin-block: 5rem;
    padding: clamp(1.375rem, -0.21698113207547176rem + 6.7924528301886795vw, 2.5rem);

}


.md-column-2 {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
}

@media (min-width: 640px) {
    .contact-form {
        grid-template-columns: repeat(2, 1fr);
    }
    .contact-form > h1 {
        grid-column: 1 / -1;;
    }
    
    .form-group:nth-child(n+4) {
        grid-column: span 2;
    }

    .md-column-2 {
        grid-template-columns: repeat(2, 1fr);
    }
}

.form-group {
    display: grid;
    gap: 0.625rem;
}

.form-group:has(.fine-text) {
    /* this means target the whole .form-group class that 
    contains/has .fin-text */
    grid-column: 1 / -1;
    margin-block: 1rem;

    display: flex;
    align-items: center;
    /* gap: 1ch; */
    /* CHANGE THE GAP FOR fem-contact-form REPO */
    gap: 1rem;
}
.form-group:has(.fine-text) > label {
    cursor: pointer;
}

.form-group:has(.md-column-2) {
    gap: 1.375rem;
}

.form-group > label {
    /* DELETE THESE FOR fem-contact-form */
    text-box-trim: trim-both;
    text-box-edge: cap alphabetic;
}

.form-group > label::after {
    content: "*";
    color: var(--clr-primary-600);
    margin-left: 0.5rem;
}

.form-group input,
.form-group textarea {
    cursor: pointer;
    font-size: var(--fs-400);
    border: 1px solid var(--clr-neutral-500);
    border-radius: var(--child-border-radius);
    padding: 0.625rem 1.5rem;

    accent-color: var(--clr-primary-600);
}

/* IS THIS CORRECT? */
.form-group input:focus-visible,
.form-group textarea:focus-visible {
    outline: 0;
    /* border: 1px solid var(--clr-primary-600); */
    box-shadow: 0 0 0 1px var(--clr-primary-600);
}

.contact-form > button:focus-visible {
    outline: 0;
}

input:not([type="checkbox"], [type="radio"]) {
    /* prevents overflowing of all inputs for 
    screen sizes < 320px, excluding the 
    mentioned input types */
    width: 100%;
}

/* make these two inputs appear bigger */
input:where([type="checkbox"], [type="radio"]) {
    width: 1.25rem;
    height: 1.25rem;
    /* accent-color: var(--clr-primary-600); */
}

.query-type-container {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem 1.5rem;
    border-radius: var(--child-border-radius);
    outline: none;
    border: 1px solid var(--clr-neutral-500);
    cursor: pointer;
}

.query-type-container > label {
    cursor: pointer;
}

/* Style the container when the radio button inside is checked */
.query-type-container:has(input:checked) {
  background-color: var(--clr-primary-200); /* Example background color for selected state */
  border-color: var(--clr-primary-600); /* Example border color for selected state */
}

.query-type-container:where(:focus, :focus-within) {
    /* border-color: var(--clr-primary-600); */
    box-shadow: 0 0 0 1px var(--clr-primary-600); /* Example: A subtle glow */
}

.query-type-label {
    font-size: var(--fs-400);
}

/* WHAT ABOUT INVALID?? TEMP */
.form-group input:user-invalid {
    outline-color: var(--clr-primary-700);
}


/* Textarea design */
.form-group textarea {
    width: 100%;
    /* Allow vertical resizing by the user, but not horizontal */
    resize: vertical;
    height: 238px;
}

@media (min-width: 640px) {
    .form-group textarea {
        height: 102px;
    }
}

.contact-form > button {
    cursor: pointer;
    grid-column: 1 / -1;
    color: var(--clr-neutral-100);
    font-size: var(--fs-400);
    padding: 1.125rem;
    border: 0;
    border-radius: var(--child-border-radius);
    background-color: var(--clr-primary-600);
}

.contact-form > button:where(:hover, :focus) {
    background-color: var(--clr-neutral-900);
}